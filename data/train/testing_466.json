{"input":{"0":"\/","1":"\/-","2":"\/-\n","3":"\/-\nCopy","4":"\/-\nCopyright","5":"\/-\nCopyright (","6":"\/-\nCopyright (c","7":"\/-\nCopyright (c)","8":"\/-\nCopyright (c) ","9":"\/-\nCopyright (c) 2","10":"\/-\nCopyright (c) 20","11":"\/-\nCopyright (c) 202","12":"\/-\nCopyright (c) 2022","13":"\/-\nCopyright (c) 2022 Eric","14":"\/-\nCopyright (c) 2022 Eric Wies","15":"\/-\nCopyright (c) 2022 Eric Wieser","16":"\/-\nCopyright (c) 2022 Eric Wieser.","17":"\/-\nCopyright (c) 2022 Eric Wieser. All","18":"\/-\nCopyright (c) 2022 Eric Wieser. All rights","19":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved","20":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.","21":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\n","22":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nRe","23":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased","24":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under","25":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache","26":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache ","27":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2","28":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.","29":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0","30":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license","31":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as","32":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described","33":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in","34":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the","35":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file","36":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file L","37":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LIC","38":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICEN","39":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE","40":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.","41":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\n","42":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuth","43":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors","44":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors:","45":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric","46":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wies","47":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser","48":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n","49":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-","50":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/","51":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\n","52":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport","53":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Math","54":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib","55":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.","56":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Al","57":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra","58":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.","59":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star","60":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.","61":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi","62":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\n","63":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport","64":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Math","65":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib","66":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.","67":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Al","68":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra","69":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.","70":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star","71":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.","72":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Pro","73":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod","74":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\n","75":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport","76":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Math","77":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib","78":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.","79":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Top","80":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology","81":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.","82":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Al","83":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra","84":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.","85":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Con","86":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constru","87":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions","88":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\n","89":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport","90":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Math","91":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib","92":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.","93":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Top","94":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology","95":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.","96":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.Cont","97":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.Continu","98":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.Continuous","99":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction","100":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.","101":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic","102":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n","103":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n","104":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#","105":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align","106":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_","107":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import","108":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology","109":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.","110":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra","111":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.","112":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star","113":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from","114":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"","115":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"lean","116":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanpro","117":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover","118":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-","119":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community","120":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/","121":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/math","122":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib","123":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"","124":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"","125":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4","126":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c","127":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c1","128":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19","129":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a","130":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a1","131":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16","132":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e","133":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4","134":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b","135":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b7","136":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b70","137":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705","138":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf","139":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf1","140":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf13","141":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135","142":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf","143":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9","144":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a","145":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a8","146":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80","147":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac","148":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac1","149":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18","150":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18f","151":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc","152":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc9","153":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99","154":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c","155":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c4","156":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c43","157":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438","158":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c4385","159":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c43851","160":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514","161":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"","162":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n","163":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n","164":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-","165":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!","166":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n","167":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n#","168":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Cont","169":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continu","170":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity","171":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of","172":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `","173":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star","174":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`","175":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n","176":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\n","177":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis","178":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file","179":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines","180":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the","181":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `","182":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `Cont","183":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `Continu","184":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `Continuous","185":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar","186":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar`","187":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` type","188":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass","189":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass,","190":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along","191":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with","192":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances","193":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on","194":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `","195":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi","196":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`,","197":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `","198":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Pro","199":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod","200":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,","201":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n","202":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`","203":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`M","204":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`Mul","205":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulO","206":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpp","207":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOppos","208":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite","209":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`,","210":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and","211":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `","212":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Un","213":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units","214":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.","215":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n","216":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-","217":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/","218":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n","219":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\n","220":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset","221":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_","222":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option","223":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option auto","224":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImp","225":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit","226":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true","227":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n","228":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\n","229":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen","230":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter","231":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Top","232":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology","233":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n","234":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n","235":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/","236":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/--","237":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic","238":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis","239":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to","240":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk","241":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about","242":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a","243":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological","244":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space","245":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with","246":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a","247":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous","248":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `","249":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star","250":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star`","251":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator","252":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator.","253":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -","254":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/","255":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\n","256":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass","257":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass Cont","258":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass Continu","259":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass Continuous","260":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar","261":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (","262":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R","263":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R :","264":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type","265":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*)","266":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [","267":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [Top","268":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [Topological","269":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace","270":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R","271":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R]","272":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [","273":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star","274":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R","275":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R]","276":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] :","277":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop","278":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where","279":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n","280":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n ","281":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/","282":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/--","283":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The","284":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `","285":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star","286":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star`","287":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator","288":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is","289":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous","290":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous.","291":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -","292":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/","293":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n","294":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n ","295":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous","296":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_","297":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star","298":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star :","299":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Cont","300":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continu","301":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous","302":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (","303":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star","304":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star :","305":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R","306":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192","307":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R","308":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)","309":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n","310":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#","311":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align","312":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has","313":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_","314":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continu","315":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous","316":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_","317":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star","318":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star Cont","319":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star Continu","320":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star Continuous","321":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar","322":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n","323":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\n","324":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport","325":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport Cont","326":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport Continu","327":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport Continuous","328":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar","329":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (","330":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continu","331":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous","332":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_","333":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star","334":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)","335":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n","336":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\n","337":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection","338":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Cont","339":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continu","340":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity","341":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n","342":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\n","343":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable","344":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [","345":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [Top","346":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [Topological","347":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace","348":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R","349":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R]","350":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [","351":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star","352":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R","353":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R]","354":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [","355":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [Cont","356":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [Continu","357":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [Continuous","358":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar","359":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R","360":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]","361":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n","362":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\n","363":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem","364":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuous","365":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn","366":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_","367":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star","368":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {","369":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s","370":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s :","371":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set","372":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R","373":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R}","374":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} :","375":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : Cont","376":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : Continu","377":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : Continuous","378":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn","379":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star","380":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s","381":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=","382":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n","383":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n ","384":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous","385":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_","386":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star","387":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.","388":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continu","389":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuous","390":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn","391":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n","392":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#","393":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align","394":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous","395":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_","396":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on","397":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_","398":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star","399":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuous","400":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn","401":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_","402":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star","403":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n","404":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\n","405":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem","406":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuous","407":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWith","408":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithin","409":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt","410":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_","411":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star","412":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {","413":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s","414":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s :","415":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set","416":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R","417":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R}","418":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {","419":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x","420":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x :","421":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R","422":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R}","423":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} :","424":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : Cont","425":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : Continu","426":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : Continuous","427":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWith","428":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithin","429":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt","430":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star","431":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s","432":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x","433":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=","434":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n","435":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n ","436":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous","437":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_","438":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star","439":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.","440":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continu","441":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuous","442":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWith","443":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithin","444":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt","445":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n","446":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#","447":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align","448":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous","449":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_","450":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_with","451":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within","452":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_","453":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at","454":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_","455":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star","456":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuous","457":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWith","458":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithin","459":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt","460":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_","461":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star","462":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n","463":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\n","464":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem","465":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuous","466":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt","467":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_","468":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star","469":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {","470":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x","471":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x :","472":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R","473":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R}","474":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} :","475":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : Cont","476":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : Continu","477":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : Continuous","478":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt","479":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star","480":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x","481":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=","482":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n","483":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n ","484":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous","485":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_","486":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star","487":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.","488":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continu","489":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuous","490":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt","491":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n","492":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#","493":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align","494":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous","495":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_","496":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at","497":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_","498":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star","499":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuous","500":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt","501":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_","502":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star","503":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n","504":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\n","505":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem","506":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tend","507":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto","508":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_","509":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star","510":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (","511":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a","512":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a :","513":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R","514":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R)","515":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) :","516":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : T","517":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tend","518":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto","519":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star","520":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (","521":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd","522":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a","523":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a)","524":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (","525":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd","526":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (","527":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star","528":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a","529":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a))","530":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=","531":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n","532":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n ","533":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuous","534":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt","535":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_","536":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star","537":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n","538":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#","539":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align","540":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tend","541":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto","542":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_","543":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star","544":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tend","545":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto","546":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_","547":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star","548":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n","549":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\n","550":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem","551":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter","552":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.","553":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.T","554":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tend","555":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto","556":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.","557":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star","558":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {","559":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f","560":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f :","561":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1","562":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192","563":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R","564":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R}","565":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {","566":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l","567":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l :","568":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter","569":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1","570":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1}","571":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {","572":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y","573":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y :","574":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R","575":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R}","576":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (","577":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h","578":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h :","579":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : T","580":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tend","581":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto","582":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f","583":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l","584":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (","585":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd","586":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y","587":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y))","588":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :","589":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n","590":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n   ","591":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    T","592":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tend","593":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto","594":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (","595":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun","596":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x","597":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x =>","598":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star","599":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (","600":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f","601":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x","602":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x))","603":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l","604":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (","605":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd","606":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (","607":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star","608":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y","609":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y))","610":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=","611":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n","612":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n ","613":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (","614":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continu","615":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous","616":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_","617":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star","618":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.","619":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.t","620":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tend","621":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto","622":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y","623":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).","624":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp","625":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h","626":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n","627":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#","628":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align","629":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter","630":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.","631":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.t","632":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tend","633":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto","634":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.","635":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star","636":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter","637":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.","638":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.T","639":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tend","640":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto","641":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.","642":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star","643":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n","644":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\n","645":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable","646":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [","647":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [Top","648":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [Topological","649":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace","650":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1","651":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1]","652":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {","653":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f","654":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f :","655":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1","656":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192","657":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R","658":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R}","659":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {","660":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s","661":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s :","662":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set","663":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1","664":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1}","665":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {","666":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x","667":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x :","668":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1","669":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}","670":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n","671":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n","672":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@","673":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[","674":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continu","675":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity","676":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]","677":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\n","678":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem","679":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Cont","680":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continu","681":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous","682":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.","683":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star","684":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (","685":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (h","686":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf","687":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf :","688":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Cont","689":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continu","690":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous","691":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f","692":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f)","693":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) :","694":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Cont","695":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continu","696":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous","697":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun","698":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x","699":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x =>","700":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star","701":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (","702":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f","703":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x","704":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x)","705":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=","706":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n","707":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n ","708":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous","709":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_","710":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star","711":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.","712":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp","713":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp h","714":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf","715":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n","716":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#","717":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align","718":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous","719":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.","720":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star","721":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Cont","722":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continu","723":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous","724":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.","725":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star","726":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n","727":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\n","728":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem","729":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem Cont","730":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem Continu","731":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem Continuous","732":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt","733":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.","734":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star","735":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (","736":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (h","737":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf","738":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf :","739":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : Cont","740":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : Continu","741":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : Continuous","742":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt","743":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f","744":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x","745":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x)","746":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) :","747":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : Cont","748":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : Continu","749":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : Continuous","750":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt","751":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (","752":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun","753":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x","754":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x =>","755":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star","756":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (","757":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f","758":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x","759":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x))","760":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x","761":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=","762":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n","763":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n ","764":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuous","765":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt","766":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_","767":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star","768":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.","769":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp","770":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp h","771":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf","772":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n","773":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#","774":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align","775":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous","776":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_","777":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at","778":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.","779":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star","780":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star Cont","781":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star Continu","782":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star Continuous","783":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt","784":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.","785":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star","786":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n","787":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\n","788":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem","789":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem Cont","790":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem Continu","791":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem Continuous","792":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn","793":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.","794":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star","795":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (","796":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (h","797":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf","798":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf :","799":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : Cont","800":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : Continu","801":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : Continuous","802":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn","803":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f","804":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s","805":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s)","806":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) :","807":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : Cont","808":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : Continu","809":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : Continuous","810":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn","811":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (","812":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun","813":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x","814":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x =>","815":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star","816":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (","817":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f","818":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x","819":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x))","820":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s","821":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=","822":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n","823":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n ","824":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous","825":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_","826":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star","827":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.","828":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp","829":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_","830":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continu","831":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuous","832":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn","833":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn h","834":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf","835":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n","836":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#","837":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align","838":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous","839":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_","840":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on","841":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.","842":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star","843":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star Cont","844":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star Continu","845":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star Continuous","846":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn","847":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.","848":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star","849":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n","850":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\n","851":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem","852":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem Cont","853":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem Continu","854":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem Continuous","855":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWith","856":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithin","857":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt","858":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.","859":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star","860":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (","861":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (h","862":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf","863":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf :","864":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : Cont","865":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : Continu","866":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : Continuous","867":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWith","868":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithin","869":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt","870":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f","871":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s","872":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x","873":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x)","874":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :","875":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n","876":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n   ","877":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    Cont","878":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    Continu","879":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    Continuous","880":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWith","881":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithin","882":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt","883":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (","884":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun","885":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x","886":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x =>","887":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star","888":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (","889":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f","890":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x","891":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x))","892":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s","893":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x","894":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=","895":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n","896":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n ","897":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter","898":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.","899":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.T","900":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tend","901":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto","902":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.","903":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star","904":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star h","905":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf","906":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n","907":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#","908":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align","909":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous","910":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_","911":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_with","912":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within","913":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_","914":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at","915":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.","916":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star","917":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star Cont","918":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star Continu","919":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star Continuous","920":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWith","921":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithin","922":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt","923":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.","924":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star","925":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n","926":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n","927":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/","928":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/--","929":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The","930":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star","931":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation","932":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bund","933":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled","934":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as","935":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a","936":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous","937":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map","938":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map.","939":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -","940":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/","941":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n","942":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@","943":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[","944":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[sim","945":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps","946":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]","947":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\n","948":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef","949":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef star","950":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starCont","951":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinu","952":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuous","953":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap","954":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap :","955":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C","956":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(","957":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R","958":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R,","959":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R","960":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R)","961":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=","962":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n","963":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  ","964":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8","965":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star","966":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star,","967":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous","968":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_","969":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star","970":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9","971":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n","972":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#","973":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align","974":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star","975":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_","976":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continu","977":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous","978":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_","979":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map","980":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map star","981":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starCont","982":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinu","983":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuous","984":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap","985":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n","986":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\n","987":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend","988":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Cont","989":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continu","990":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity","991":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n","992":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\n","993":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection","994":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Inst","995":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances","996":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n","997":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\n","998":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance","999":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [","1000":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star","1001":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R","1002":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R]","1003":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [","1004":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star","1005":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S","1006":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S]","1007":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [","1008":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [Top","1009":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [Topological","1010":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace","1011":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R","1012":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R]","1013":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [","1014":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [Top","1015":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [Topological","1016":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace","1017":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S","1018":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S]","1019":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [","1020":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [Cont","1021":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [Continu","1022":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [Continuous","1023":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar","1024":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R","1025":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]","1026":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n","1027":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n   ","1028":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [","1029":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [Cont","1030":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [Continu","1031":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [Continuous","1032":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar","1033":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S","1034":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S]","1035":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] :","1036":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : Cont","1037":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : Continu","1038":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : Continuous","1039":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar","1040":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (","1041":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R","1042":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7","1043":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S","1044":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S)","1045":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=","1046":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n","1047":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  ","1048":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8","1049":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(","1050":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continu","1051":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous","1052":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_","1053":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star","1054":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.","1055":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp","1056":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous","1057":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_","1058":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_f","1059":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst","1060":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).","1061":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod","1062":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_","1063":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk","1064":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (","1065":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continu","1066":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous","1067":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_","1068":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star","1069":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.","1070":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp","1071":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous","1072":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_","1073":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_s","1074":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd","1075":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)","1076":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9","1077":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n","1078":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\n","1079":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance","1080":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {","1081":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C","1082":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C :","1083":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : ","1084":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9","1085":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192","1086":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type","1087":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*}","1088":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [","1089":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200","1090":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i","1091":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i,","1092":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, Top","1093":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, Topological","1094":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace","1095":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (","1096":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C","1097":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i","1098":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)]","1099":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [","1100":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200","1101":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i","1102":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i,","1103":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star","1104":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (","1105":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C","1106":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i","1107":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]","1108":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n","1109":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n   ","1110":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [","1111":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200","1112":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i","1113":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i,","1114":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, Cont","1115":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, Continu","1116":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, Continuous","1117":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar","1118":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (","1119":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C","1120":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i","1121":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)]","1122":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] :","1123":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : Cont","1124":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : Continu","1125":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : Continuous","1126":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar","1127":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (","1128":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200","1129":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i","1130":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i,","1131":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C","1132":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i","1133":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i)","1134":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where","1135":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n","1136":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n ","1137":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous","1138":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_","1139":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star","1140":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star :=","1141":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous","1142":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_","1143":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi","1144":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun","1145":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i","1146":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i =>","1147":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Cont","1148":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continu","1149":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous","1150":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.","1151":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star","1152":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (","1153":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continu","1154":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous","1155":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_","1156":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply","1157":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i","1158":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)","1159":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n","1160":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\n","1161":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance","1162":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [","1163":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star","1164":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R","1165":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R]","1166":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [","1167":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [Top","1168":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [Topological","1169":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace","1170":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R","1171":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R]","1172":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [","1173":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [Cont","1174":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [Continu","1175":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [Continuous","1176":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar","1177":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R","1178":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R]","1179":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] :","1180":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : Cont","1181":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : Continu","1182":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : Continuous","1183":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar","1184":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R","1185":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\ufffd","1186":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\ufffd\ufffd","1187":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50","1188":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\ufffd","1189":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\ufffd\ufffd","1190":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52","1191":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\ufffd","1192":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\ufffd\ufffd","1193":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56","1194":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=","1195":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n","1196":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  ","1197":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8","1198":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8M","1199":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8Mul","1200":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulO","1201":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpp","1202":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOppos","1203":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite","1204":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.","1205":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continu","1206":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous","1207":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_","1208":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op","1209":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.","1210":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp","1211":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <","1212":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <|","1213":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| Mul","1214":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulO","1215":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpp","1216":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOppos","1217":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite","1218":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.","1219":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continu","1220":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous","1221":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_","1222":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_un","1223":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop","1224":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.","1225":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star","1226":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9","1227":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n","1228":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\n","1229":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance","1230":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [","1231":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [M","1232":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Mono","1233":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid","1234":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R","1235":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R]","1236":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [","1237":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [Star","1238":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarM","1239":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul","1240":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R","1241":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R]","1242":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [","1243":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [Top","1244":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [Topological","1245":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace","1246":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R","1247":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R]","1248":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [","1249":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [Cont","1250":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [Continu","1251":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [Continuous","1252":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar","1253":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R","1254":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R]","1255":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :","1256":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n","1257":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n   ","1258":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    Cont","1259":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    Continu","1260":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    Continuous","1261":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar","1262":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R","1263":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\ufffd","1264":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3","1265":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=","1266":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n","1267":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  ","1268":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8","1269":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continu","1270":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous","1271":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_","1272":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_indu","1273":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced","1274":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_","1275":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_r","1276":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng","1277":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.","1278":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2","1279":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units","1280":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.","1281":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continu","1282":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous","1283":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_","1284":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embed","1285":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct","1286":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.","1287":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star","1288":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star\u27e9","1289":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star\u27e9\n","1290":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star\u27e9\n\n","1291":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star\u27e9\n\nend","1292":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star\u27e9\n\nend Inst","1293":"\/-\nCopyright (c) 2022 Eric Wieser. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Eric Wieser\n-\/\nimport Mathlib.Algebra.Star.Pi\nimport Mathlib.Algebra.Star.Prod\nimport Mathlib.Topology.Algebra.Constructions\nimport Mathlib.Topology.ContinuousFunction.Basic\n\n#align_import topology.algebra.star from \"leanprover-community\/mathlib\"@\"4c19a16e4b705bf135cf9a80ac18fcc99c438514\"\n\n\/-!\n# Continuity of `star`\n\nThis file defines the `ContinuousStar` typeclass, along with instances on `Pi`, `Prod`,\n`MulOpposite`, and `Units`.\n-\/\n\nset_option autoImplicit true\n\nopen Filter Topology\n\n\/-- Basic hypothesis to talk about a topological space with a continuous `star` operator. -\/\nclass ContinuousStar (R : Type*) [TopologicalSpace R] [Star R] : Prop where\n  \/-- The `star` operator is continuous. -\/\n  continuous_star : Continuous (star : R \u2192 R)\n#align has_continuous_star ContinuousStar\n\nexport ContinuousStar (continuous_star)\n\nsection Continuity\n\nvariable [TopologicalSpace R] [Star R] [ContinuousStar R]\n\ntheorem continuousOn_star {s : Set R} : ContinuousOn star s :=\n  continuous_star.continuousOn\n#align continuous_on_star continuousOn_star\n\ntheorem continuousWithinAt_star {s : Set R} {x : R} : ContinuousWithinAt star s x :=\n  continuous_star.continuousWithinAt\n#align continuous_within_at_star continuousWithinAt_star\n\ntheorem continuousAt_star {x : R} : ContinuousAt star x :=\n  continuous_star.continuousAt\n#align continuous_at_star continuousAt_star\n\ntheorem tendsto_star (a : R) : Tendsto star (\ud835\udcdd a) (\ud835\udcdd (star a)) :=\n  continuousAt_star\n#align tendsto_star tendsto_star\n\ntheorem Filter.Tendsto.star {f : \u03b1 \u2192 R} {l : Filter \u03b1} {y : R} (h : Tendsto f l (\ud835\udcdd y)) :\n    Tendsto (fun x => star (f x)) l (\ud835\udcdd (star y)) :=\n  (continuous_star.tendsto y).comp h\n#align filter.tendsto.star Filter.Tendsto.star\n\nvariable [TopologicalSpace \u03b1] {f : \u03b1 \u2192 R} {s : Set \u03b1} {x : \u03b1}\n\n@[continuity]\ntheorem Continuous.star (hf : Continuous f) : Continuous fun x => star (f x) :=\n  continuous_star.comp hf\n#align continuous.star Continuous.star\n\ntheorem ContinuousAt.star (hf : ContinuousAt f x) : ContinuousAt (fun x => star (f x)) x :=\n  continuousAt_star.comp hf\n#align continuous_at.star ContinuousAt.star\n\ntheorem ContinuousOn.star (hf : ContinuousOn f s) : ContinuousOn (fun x => star (f x)) s :=\n  continuous_star.comp_continuousOn hf\n#align continuous_on.star ContinuousOn.star\n\ntheorem ContinuousWithinAt.star (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => star (f x)) s x :=\n  Filter.Tendsto.star hf\n#align continuous_within_at.star ContinuousWithinAt.star\n\n\/-- The star operation bundled as a continuous map. -\/\n@[simps]\ndef starContinuousMap : C(R, R) :=\n  \u27e8star, continuous_star\u27e9\n#align star_continuous_map starContinuousMap\n\nend Continuity\n\nsection Instances\n\ninstance [Star R] [Star S] [TopologicalSpace R] [TopologicalSpace S] [ContinuousStar R]\n    [ContinuousStar S] : ContinuousStar (R \u00d7 S) :=\n  \u27e8(continuous_star.comp continuous_fst).prod_mk (continuous_star.comp continuous_snd)\u27e9\n\ninstance {C : \u03b9 \u2192 Type*} [\u2200 i, TopologicalSpace (C i)] [\u2200 i, Star (C i)]\n    [\u2200 i, ContinuousStar (C i)] : ContinuousStar (\u2200 i, C i) where\n  continuous_star := continuous_pi fun i => Continuous.star (continuous_apply i)\n\ninstance [Star R] [TopologicalSpace R] [ContinuousStar R] : ContinuousStar R\u1d50\u1d52\u1d56 :=\n  \u27e8MulOpposite.continuous_op.comp <| MulOpposite.continuous_unop.star\u27e9\n\ninstance [Monoid R] [StarMul R] [TopologicalSpace R] [ContinuousStar R] :\n    ContinuousStar R\u02e3 :=\n  \u27e8continuous_induced_rng.2 Units.continuous_embedProduct.star\u27e9\n\nend Instances"},"target":{"0":"-","1":"<0x0A>","2":"Copy","3":"right","4":"\u2581(","5":"c","6":")","7":"\u2581","8":"2","9":"0","10":"2","11":"2","12":"\u2581Eric","13":"\u2581Wies","14":"er","15":".","16":"\u2581All","17":"\u2581rights","18":"\u2581reserved","19":".","20":"<0x0A>","21":"Re","22":"leased","23":"\u2581under","24":"\u2581Apache","25":"\u2581","26":"2","27":".","28":"0","29":"\u2581license","30":"\u2581as","31":"\u2581described","32":"\u2581in","33":"\u2581the","34":"\u2581file","35":"\u2581L","36":"IC","37":"EN","38":"SE","39":".","40":"<0x0A>","41":"Auth","42":"ors","43":":","44":"\u2581Eric","45":"\u2581Wies","46":"er","47":"<0x0A>","48":"-","49":"\/","50":"<0x0A>","51":"import","52":"\u2581Math","53":"lib","54":".","55":"Al","56":"gebra","57":".","58":"Star","59":".","60":"Pi","61":"<0x0A>","62":"import","63":"\u2581Math","64":"lib","65":".","66":"Al","67":"gebra","68":".","69":"Star","70":".","71":"Pro","72":"d","73":"<0x0A>","74":"import","75":"\u2581Math","76":"lib","77":".","78":"Top","79":"ology","80":".","81":"Al","82":"gebra","83":".","84":"Con","85":"stru","86":"ctions","87":"<0x0A>","88":"import","89":"\u2581Math","90":"lib","91":".","92":"Top","93":"ology","94":".","95":"Cont","96":"inu","97":"ous","98":"Function","99":".","100":"Basic","101":"<0x0A>","102":"<0x0A>","103":"#","104":"align","105":"_","106":"import","107":"\u2581topology","108":".","109":"algebra","110":".","111":"star","112":"\u2581from","113":"\u2581\"","114":"lean","115":"pro","116":"ver","117":"-","118":"community","119":"\/","120":"math","121":"lib","122":"\"","123":"@\"","124":"4","125":"c","126":"1","127":"9","128":"a","129":"1","130":"6","131":"e","132":"4","133":"b","134":"7","135":"0","136":"5","137":"bf","138":"1","139":"3","140":"5","141":"cf","142":"9","143":"a","144":"8","145":"0","146":"ac","147":"1","148":"8","149":"f","150":"cc","151":"9","152":"9","153":"c","154":"4","155":"3","156":"8","157":"5","158":"1","159":"4","160":"\"","161":"<0x0A>","162":"<0x0A>","163":"\/-","164":"!","165":"<0x0A>","166":"#","167":"\u2581Cont","168":"inu","169":"ity","170":"\u2581of","171":"\u2581`","172":"star","173":"`","174":"<0x0A>","175":"<0x0A>","176":"This","177":"\u2581file","178":"\u2581defines","179":"\u2581the","180":"\u2581`","181":"Cont","182":"inu","183":"ous","184":"Star","185":"`","186":"\u2581type","187":"class","188":",","189":"\u2581along","190":"\u2581with","191":"\u2581instances","192":"\u2581on","193":"\u2581`","194":"Pi","195":"`,","196":"\u2581`","197":"Pro","198":"d","199":"`,","200":"<0x0A>","201":"`","202":"M","203":"ul","204":"O","205":"pp","206":"os","207":"ite","208":"`,","209":"\u2581and","210":"\u2581`","211":"Un","212":"its","213":"`.","214":"<0x0A>","215":"-","216":"\/","217":"<0x0A>","218":"<0x0A>","219":"set","220":"_","221":"option","222":"\u2581auto","223":"Imp","224":"licit","225":"\u2581true","226":"<0x0A>","227":"<0x0A>","228":"open","229":"\u2581Filter","230":"\u2581Top","231":"ology","232":"<0x0A>","233":"<0x0A>","234":"\/","235":"--","236":"\u2581Basic","237":"\u2581hypothesis","238":"\u2581to","239":"\u2581talk","240":"\u2581about","241":"\u2581a","242":"\u2581topological","243":"\u2581space","244":"\u2581with","245":"\u2581a","246":"\u2581continuous","247":"\u2581`","248":"star","249":"`","250":"\u2581operator","251":".","252":"\u2581-","253":"\/","254":"<0x0A>","255":"class","256":"\u2581Cont","257":"inu","258":"ous","259":"Star","260":"\u2581(","261":"R","262":"\u2581:","263":"\u2581Type","264":"*)","265":"\u2581[","266":"Top","267":"ological","268":"Space","269":"\u2581R","270":"]","271":"\u2581[","272":"Star","273":"\u2581R","274":"]","275":"\u2581:","276":"\u2581Prop","277":"\u2581where","278":"<0x0A>","279":"\u2581","280":"\u2581\/","281":"--","282":"\u2581The","283":"\u2581`","284":"star","285":"`","286":"\u2581operator","287":"\u2581is","288":"\u2581continuous","289":".","290":"\u2581-","291":"\/","292":"<0x0A>","293":"\u2581","294":"\u2581continuous","295":"_","296":"star","297":"\u2581:","298":"\u2581Cont","299":"inu","300":"ous","301":"\u2581(","302":"star","303":"\u2581:","304":"\u2581R","305":"\u2581\u2192","306":"\u2581R","307":")","308":"<0x0A>","309":"#","310":"align","311":"\u2581has","312":"_","313":"continu","314":"ous","315":"_","316":"star","317":"\u2581Cont","318":"inu","319":"ous","320":"Star","321":"<0x0A>","322":"<0x0A>","323":"export","324":"\u2581Cont","325":"inu","326":"ous","327":"Star","328":"\u2581(","329":"continu","330":"ous","331":"_","332":"star","333":")","334":"<0x0A>","335":"<0x0A>","336":"section","337":"\u2581Cont","338":"inu","339":"ity","340":"<0x0A>","341":"<0x0A>","342":"variable","343":"\u2581[","344":"Top","345":"ological","346":"Space","347":"\u2581R","348":"]","349":"\u2581[","350":"Star","351":"\u2581R","352":"]","353":"\u2581[","354":"Cont","355":"inu","356":"ous","357":"Star","358":"\u2581R","359":"]","360":"<0x0A>","361":"<0x0A>","362":"theorem","363":"\u2581continuous","364":"On","365":"_","366":"star","367":"\u2581{","368":"s","369":"\u2581:","370":"\u2581Set","371":"\u2581R","372":"}","373":"\u2581:","374":"\u2581Cont","375":"inu","376":"ous","377":"On","378":"\u2581star","379":"\u2581s","380":"\u2581:=","381":"<0x0A>","382":"\u2581","383":"\u2581continuous","384":"_","385":"star","386":".","387":"continu","388":"ous","389":"On","390":"<0x0A>","391":"#","392":"align","393":"\u2581continuous","394":"_","395":"on","396":"_","397":"star","398":"\u2581continuous","399":"On","400":"_","401":"star","402":"<0x0A>","403":"<0x0A>","404":"theorem","405":"\u2581continuous","406":"With","407":"in","408":"At","409":"_","410":"star","411":"\u2581{","412":"s","413":"\u2581:","414":"\u2581Set","415":"\u2581R","416":"}","417":"\u2581{","418":"x","419":"\u2581:","420":"\u2581R","421":"}","422":"\u2581:","423":"\u2581Cont","424":"inu","425":"ous","426":"With","427":"in","428":"At","429":"\u2581star","430":"\u2581s","431":"\u2581x","432":"\u2581:=","433":"<0x0A>","434":"\u2581","435":"\u2581continuous","436":"_","437":"star","438":".","439":"continu","440":"ous","441":"With","442":"in","443":"At","444":"<0x0A>","445":"#","446":"align","447":"\u2581continuous","448":"_","449":"with","450":"in","451":"_","452":"at","453":"_","454":"star","455":"\u2581continuous","456":"With","457":"in","458":"At","459":"_","460":"star","461":"<0x0A>","462":"<0x0A>","463":"theorem","464":"\u2581continuous","465":"At","466":"_","467":"star","468":"\u2581{","469":"x","470":"\u2581:","471":"\u2581R","472":"}","473":"\u2581:","474":"\u2581Cont","475":"inu","476":"ous","477":"At","478":"\u2581star","479":"\u2581x","480":"\u2581:=","481":"<0x0A>","482":"\u2581","483":"\u2581continuous","484":"_","485":"star","486":".","487":"continu","488":"ous","489":"At","490":"<0x0A>","491":"#","492":"align","493":"\u2581continuous","494":"_","495":"at","496":"_","497":"star","498":"\u2581continuous","499":"At","500":"_","501":"star","502":"<0x0A>","503":"<0x0A>","504":"theorem","505":"\u2581tend","506":"sto","507":"_","508":"star","509":"\u2581(","510":"a","511":"\u2581:","512":"\u2581R","513":")","514":"\u2581:","515":"\u2581T","516":"end","517":"sto","518":"\u2581star","519":"\u2581(","520":"\ud835\udcdd","521":"\u2581a","522":")","523":"\u2581(","524":"\ud835\udcdd","525":"\u2581(","526":"star","527":"\u2581a","528":"))","529":"\u2581:=","530":"<0x0A>","531":"\u2581","532":"\u2581continuous","533":"At","534":"_","535":"star","536":"<0x0A>","537":"#","538":"align","539":"\u2581tend","540":"sto","541":"_","542":"star","543":"\u2581tend","544":"sto","545":"_","546":"star","547":"<0x0A>","548":"<0x0A>","549":"theorem","550":"\u2581Filter","551":".","552":"T","553":"end","554":"sto","555":".","556":"star","557":"\u2581{","558":"f","559":"\u2581:","560":"\u2581\u03b1","561":"\u2581\u2192","562":"\u2581R","563":"}","564":"\u2581{","565":"l","566":"\u2581:","567":"\u2581Filter","568":"\u2581\u03b1","569":"}","570":"\u2581{","571":"y","572":"\u2581:","573":"\u2581R","574":"}","575":"\u2581(","576":"h","577":"\u2581:","578":"\u2581T","579":"end","580":"sto","581":"\u2581f","582":"\u2581l","583":"\u2581(","584":"\ud835\udcdd","585":"\u2581y","586":"))","587":"\u2581:","588":"<0x0A>","589":"\u2581\u2581\u2581","590":"\u2581T","591":"end","592":"sto","593":"\u2581(","594":"fun","595":"\u2581x","596":"\u2581=>","597":"\u2581star","598":"\u2581(","599":"f","600":"\u2581x","601":"))","602":"\u2581l","603":"\u2581(","604":"\ud835\udcdd","605":"\u2581(","606":"star","607":"\u2581y","608":"))","609":"\u2581:=","610":"<0x0A>","611":"\u2581","612":"\u2581(","613":"continu","614":"ous","615":"_","616":"star","617":".","618":"t","619":"end","620":"sto","621":"\u2581y","622":").","623":"comp","624":"\u2581h","625":"<0x0A>","626":"#","627":"align","628":"\u2581filter","629":".","630":"t","631":"end","632":"sto","633":".","634":"star","635":"\u2581Filter","636":".","637":"T","638":"end","639":"sto","640":".","641":"star","642":"<0x0A>","643":"<0x0A>","644":"variable","645":"\u2581[","646":"Top","647":"ological","648":"Space","649":"\u2581\u03b1","650":"]","651":"\u2581{","652":"f","653":"\u2581:","654":"\u2581\u03b1","655":"\u2581\u2192","656":"\u2581R","657":"}","658":"\u2581{","659":"s","660":"\u2581:","661":"\u2581Set","662":"\u2581\u03b1","663":"}","664":"\u2581{","665":"x","666":"\u2581:","667":"\u2581\u03b1","668":"}","669":"<0x0A>","670":"<0x0A>","671":"@","672":"[","673":"continu","674":"ity","675":"]","676":"<0x0A>","677":"theorem","678":"\u2581Cont","679":"inu","680":"ous","681":".","682":"star","683":"\u2581(","684":"h","685":"f","686":"\u2581:","687":"\u2581Cont","688":"inu","689":"ous","690":"\u2581f","691":")","692":"\u2581:","693":"\u2581Cont","694":"inu","695":"ous","696":"\u2581fun","697":"\u2581x","698":"\u2581=>","699":"\u2581star","700":"\u2581(","701":"f","702":"\u2581x","703":")","704":"\u2581:=","705":"<0x0A>","706":"\u2581","707":"\u2581continuous","708":"_","709":"star","710":".","711":"comp","712":"\u2581h","713":"f","714":"<0x0A>","715":"#","716":"align","717":"\u2581continuous","718":".","719":"star","720":"\u2581Cont","721":"inu","722":"ous","723":".","724":"star","725":"<0x0A>","726":"<0x0A>","727":"theorem","728":"\u2581Cont","729":"inu","730":"ous","731":"At","732":".","733":"star","734":"\u2581(","735":"h","736":"f","737":"\u2581:","738":"\u2581Cont","739":"inu","740":"ous","741":"At","742":"\u2581f","743":"\u2581x","744":")","745":"\u2581:","746":"\u2581Cont","747":"inu","748":"ous","749":"At","750":"\u2581(","751":"fun","752":"\u2581x","753":"\u2581=>","754":"\u2581star","755":"\u2581(","756":"f","757":"\u2581x","758":"))","759":"\u2581x","760":"\u2581:=","761":"<0x0A>","762":"\u2581","763":"\u2581continuous","764":"At","765":"_","766":"star","767":".","768":"comp","769":"\u2581h","770":"f","771":"<0x0A>","772":"#","773":"align","774":"\u2581continuous","775":"_","776":"at","777":".","778":"star","779":"\u2581Cont","780":"inu","781":"ous","782":"At","783":".","784":"star","785":"<0x0A>","786":"<0x0A>","787":"theorem","788":"\u2581Cont","789":"inu","790":"ous","791":"On","792":".","793":"star","794":"\u2581(","795":"h","796":"f","797":"\u2581:","798":"\u2581Cont","799":"inu","800":"ous","801":"On","802":"\u2581f","803":"\u2581s","804":")","805":"\u2581:","806":"\u2581Cont","807":"inu","808":"ous","809":"On","810":"\u2581(","811":"fun","812":"\u2581x","813":"\u2581=>","814":"\u2581star","815":"\u2581(","816":"f","817":"\u2581x","818":"))","819":"\u2581s","820":"\u2581:=","821":"<0x0A>","822":"\u2581","823":"\u2581continuous","824":"_","825":"star","826":".","827":"comp","828":"_","829":"continu","830":"ous","831":"On","832":"\u2581h","833":"f","834":"<0x0A>","835":"#","836":"align","837":"\u2581continuous","838":"_","839":"on","840":".","841":"star","842":"\u2581Cont","843":"inu","844":"ous","845":"On","846":".","847":"star","848":"<0x0A>","849":"<0x0A>","850":"theorem","851":"\u2581Cont","852":"inu","853":"ous","854":"With","855":"in","856":"At","857":".","858":"star","859":"\u2581(","860":"h","861":"f","862":"\u2581:","863":"\u2581Cont","864":"inu","865":"ous","866":"With","867":"in","868":"At","869":"\u2581f","870":"\u2581s","871":"\u2581x","872":")","873":"\u2581:","874":"<0x0A>","875":"\u2581\u2581\u2581","876":"\u2581Cont","877":"inu","878":"ous","879":"With","880":"in","881":"At","882":"\u2581(","883":"fun","884":"\u2581x","885":"\u2581=>","886":"\u2581star","887":"\u2581(","888":"f","889":"\u2581x","890":"))","891":"\u2581s","892":"\u2581x","893":"\u2581:=","894":"<0x0A>","895":"\u2581","896":"\u2581Filter","897":".","898":"T","899":"end","900":"sto","901":".","902":"star","903":"\u2581h","904":"f","905":"<0x0A>","906":"#","907":"align","908":"\u2581continuous","909":"_","910":"with","911":"in","912":"_","913":"at","914":".","915":"star","916":"\u2581Cont","917":"inu","918":"ous","919":"With","920":"in","921":"At","922":".","923":"star","924":"<0x0A>","925":"<0x0A>","926":"\/","927":"--","928":"\u2581The","929":"\u2581star","930":"\u2581operation","931":"\u2581bund","932":"led","933":"\u2581as","934":"\u2581a","935":"\u2581continuous","936":"\u2581map","937":".","938":"\u2581-","939":"\/","940":"<0x0A>","941":"@","942":"[","943":"sim","944":"ps","945":"]","946":"<0x0A>","947":"def","948":"\u2581star","949":"Cont","950":"inu","951":"ous","952":"Map","953":"\u2581:","954":"\u2581C","955":"(","956":"R","957":",","958":"\u2581R","959":")","960":"\u2581:=","961":"<0x0A>","962":"\u2581\u2581","963":"\u27e8","964":"star","965":",","966":"\u2581continuous","967":"_","968":"star","969":"\u27e9","970":"<0x0A>","971":"#","972":"align","973":"\u2581star","974":"_","975":"continu","976":"ous","977":"_","978":"map","979":"\u2581star","980":"Cont","981":"inu","982":"ous","983":"Map","984":"<0x0A>","985":"<0x0A>","986":"end","987":"\u2581Cont","988":"inu","989":"ity","990":"<0x0A>","991":"<0x0A>","992":"section","993":"\u2581Inst","994":"ances","995":"<0x0A>","996":"<0x0A>","997":"instance","998":"\u2581[","999":"Star","1000":"\u2581R","1001":"]","1002":"\u2581[","1003":"Star","1004":"\u2581S","1005":"]","1006":"\u2581[","1007":"Top","1008":"ological","1009":"Space","1010":"\u2581R","1011":"]","1012":"\u2581[","1013":"Top","1014":"ological","1015":"Space","1016":"\u2581S","1017":"]","1018":"\u2581[","1019":"Cont","1020":"inu","1021":"ous","1022":"Star","1023":"\u2581R","1024":"]","1025":"<0x0A>","1026":"\u2581\u2581\u2581","1027":"\u2581[","1028":"Cont","1029":"inu","1030":"ous","1031":"Star","1032":"\u2581S","1033":"]","1034":"\u2581:","1035":"\u2581Cont","1036":"inu","1037":"ous","1038":"Star","1039":"\u2581(","1040":"R","1041":"\u2581\u00d7","1042":"\u2581S","1043":")","1044":"\u2581:=","1045":"<0x0A>","1046":"\u2581\u2581","1047":"\u27e8","1048":"(","1049":"continu","1050":"ous","1051":"_","1052":"star","1053":".","1054":"comp","1055":"\u2581continuous","1056":"_","1057":"f","1058":"st","1059":").","1060":"prod","1061":"_","1062":"mk","1063":"\u2581(","1064":"continu","1065":"ous","1066":"_","1067":"star","1068":".","1069":"comp","1070":"\u2581continuous","1071":"_","1072":"s","1073":"nd","1074":")","1075":"\u27e9","1076":"<0x0A>","1077":"<0x0A>","1078":"instance","1079":"\u2581{","1080":"C","1081":"\u2581:","1082":"\u2581","1083":"\u03b9","1084":"\u2581\u2192","1085":"\u2581Type","1086":"*}","1087":"\u2581[","1088":"\u2200","1089":"\u2581i","1090":",","1091":"\u2581Top","1092":"ological","1093":"Space","1094":"\u2581(","1095":"C","1096":"\u2581i","1097":")]","1098":"\u2581[","1099":"\u2200","1100":"\u2581i","1101":",","1102":"\u2581Star","1103":"\u2581(","1104":"C","1105":"\u2581i","1106":")]","1107":"<0x0A>","1108":"\u2581\u2581\u2581","1109":"\u2581[","1110":"\u2200","1111":"\u2581i","1112":",","1113":"\u2581Cont","1114":"inu","1115":"ous","1116":"Star","1117":"\u2581(","1118":"C","1119":"\u2581i","1120":")]","1121":"\u2581:","1122":"\u2581Cont","1123":"inu","1124":"ous","1125":"Star","1126":"\u2581(","1127":"\u2200","1128":"\u2581i","1129":",","1130":"\u2581C","1131":"\u2581i","1132":")","1133":"\u2581where","1134":"<0x0A>","1135":"\u2581","1136":"\u2581continuous","1137":"_","1138":"star","1139":"\u2581:=","1140":"\u2581continuous","1141":"_","1142":"pi","1143":"\u2581fun","1144":"\u2581i","1145":"\u2581=>","1146":"\u2581Cont","1147":"inu","1148":"ous","1149":".","1150":"star","1151":"\u2581(","1152":"continu","1153":"ous","1154":"_","1155":"apply","1156":"\u2581i","1157":")","1158":"<0x0A>","1159":"<0x0A>","1160":"instance","1161":"\u2581[","1162":"Star","1163":"\u2581R","1164":"]","1165":"\u2581[","1166":"Top","1167":"ological","1168":"Space","1169":"\u2581R","1170":"]","1171":"\u2581[","1172":"Cont","1173":"inu","1174":"ous","1175":"Star","1176":"\u2581R","1177":"]","1178":"\u2581:","1179":"\u2581Cont","1180":"inu","1181":"ous","1182":"Star","1183":"\u2581R","1184":"<0xE1>","1185":"<0xB5>","1186":"<0x90>","1187":"<0xE1>","1188":"<0xB5>","1189":"<0x92>","1190":"<0xE1>","1191":"<0xB5>","1192":"<0x96>","1193":"\u2581:=","1194":"<0x0A>","1195":"\u2581\u2581","1196":"\u27e8","1197":"M","1198":"ul","1199":"O","1200":"pp","1201":"os","1202":"ite","1203":".","1204":"continu","1205":"ous","1206":"_","1207":"op","1208":".","1209":"comp","1210":"\u2581<","1211":"|","1212":"\u2581Mul","1213":"O","1214":"pp","1215":"os","1216":"ite","1217":".","1218":"continu","1219":"ous","1220":"_","1221":"un","1222":"op","1223":".","1224":"star","1225":"\u27e9","1226":"<0x0A>","1227":"<0x0A>","1228":"instance","1229":"\u2581[","1230":"M","1231":"ono","1232":"id","1233":"\u2581R","1234":"]","1235":"\u2581[","1236":"Star","1237":"M","1238":"ul","1239":"\u2581R","1240":"]","1241":"\u2581[","1242":"Top","1243":"ological","1244":"Space","1245":"\u2581R","1246":"]","1247":"\u2581[","1248":"Cont","1249":"inu","1250":"ous","1251":"Star","1252":"\u2581R","1253":"]","1254":"\u2581:","1255":"<0x0A>","1256":"\u2581\u2581\u2581","1257":"\u2581Cont","1258":"inu","1259":"ous","1260":"Star","1261":"\u2581R","1262":"<0xCB>","1263":"<0xA3>","1264":"\u2581:=","1265":"<0x0A>","1266":"\u2581\u2581","1267":"\u27e8","1268":"continu","1269":"ous","1270":"_","1271":"indu","1272":"ced","1273":"_","1274":"r","1275":"ng","1276":".","1277":"2","1278":"\u2581Units","1279":".","1280":"continu","1281":"ous","1282":"_","1283":"embed","1284":"Product","1285":".","1286":"star","1287":"\u27e9","1288":"<0x0A>","1289":"<0x0A>","1290":"end","1291":"\u2581Inst","1292":"ances","1293":"<0x0A>"}}