{"input":{"0":"\/","1":"\/-","2":"\/-\n","3":"\/-\nCopy","4":"\/-\nCopyright","5":"\/-\nCopyright (","6":"\/-\nCopyright (c","7":"\/-\nCopyright (c)","8":"\/-\nCopyright (c) ","9":"\/-\nCopyright (c) 2","10":"\/-\nCopyright (c) 20","11":"\/-\nCopyright (c) 202","12":"\/-\nCopyright (c) 2021","13":"\/-\nCopyright (c) 2021 Johan","14":"\/-\nCopyright (c) 2021 Johan Comm","15":"\/-\nCopyright (c) 2021 Johan Commelin","16":"\/-\nCopyright (c) 2021 Johan Commelin.","17":"\/-\nCopyright (c) 2021 Johan Commelin. All","18":"\/-\nCopyright (c) 2021 Johan Commelin. All rights","19":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved","20":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.","21":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\n","22":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nRe","23":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased","24":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under","25":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache","26":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache ","27":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2","28":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.","29":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0","30":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license","31":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as","32":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described","33":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in","34":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the","35":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file","36":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file L","37":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LIC","38":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICEN","39":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE","40":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.","41":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\n","42":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuth","43":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors","44":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors:","45":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan","46":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Comm","47":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin","48":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n","49":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-","50":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/","51":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\n","52":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport","53":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Math","54":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib","55":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.","56":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Al","57":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra","58":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.","59":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Hom","60":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology","61":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.","62":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.Hom","63":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.Homological","64":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComple","65":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex","66":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n","67":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n","68":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#","69":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align","70":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_","71":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import","72":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra","73":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.","74":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.hom","75":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology","76":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.","77":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.fun","78":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor","79":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from","80":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"","81":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"lean","82":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanpro","83":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover","84":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-","85":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community","86":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/","87":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/math","88":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib","89":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"","90":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"","91":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8","92":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e","93":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e2","94":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25","95":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb","96":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6","97":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c","98":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1","99":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c16","100":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c164","101":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645","102":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb","103":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb8","104":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80","105":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb806","106":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb8067","107":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670","108":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e","109":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e1","110":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13","111":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e138","112":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e1384","113":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848","114":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b","115":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b7","116":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79","117":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a","118":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a5","119":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54","120":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa","121":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa4","122":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45","123":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb","124":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb8","125":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84","126":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f","127":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"","128":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n","129":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n","130":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-","131":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!","132":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n","133":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n#","134":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Comple","135":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes","136":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in","137":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in fun","138":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor","139":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories","140":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n","141":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\n","142":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe","143":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can","144":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view","145":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a","146":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex","147":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex val","148":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued","149":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in","150":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a","151":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a fun","152":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor","153":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category","154":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `","155":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T","156":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T ","157":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964","158":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V","159":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V`","160":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as","161":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\n","162":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na","163":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na fun","164":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor","165":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from","166":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `","167":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T","168":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T`","169":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to","170":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complex","171":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes","172":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes val","173":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued","174":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in","175":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `","176":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V","177":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.","178":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n","179":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n","180":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n##","181":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future","182":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work","183":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\n","184":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn","185":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact","186":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this","187":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is","188":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an","189":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence","190":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of","191":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories","192":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.","193":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n","194":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n","195":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-","196":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/","197":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n","198":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n","199":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\n","200":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nun","201":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse","202":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v","203":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u","204":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n","205":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\n","206":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen","207":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen Category","208":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryThe","209":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory","210":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n","211":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\n","212":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen","213":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen Category","214":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryThe","215":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory","216":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.","217":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.L","218":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Lim","219":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits","220":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n","221":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\n","222":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace","223":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace Hom","224":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace Homological","225":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComple","226":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex","227":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n","228":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\n","229":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable","230":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {","231":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V","232":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V :","233":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type","234":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u","235":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u}","236":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [","237":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category","238":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.","239":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{","240":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v","241":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v}","242":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V","243":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V]","244":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [","245":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [Has","246":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZero","247":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroM","248":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorph","249":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms","250":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V","251":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]","252":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n","253":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\n","254":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable","255":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {","256":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9","257":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 :","258":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type","259":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*}","260":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {","261":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c","262":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c :","263":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : Complex","264":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape","265":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape ","266":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9","267":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}","268":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n","269":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n","270":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/","271":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/--","272":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A","273":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex","274":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of","275":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of fun","276":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors","277":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives","278":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a","279":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a fun","280":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor","281":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to","282":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complex","283":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes","284":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes.","285":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -","286":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/","287":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n","288":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@","289":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[","290":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[sim","291":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps","292":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj","293":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map","294":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]","295":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\n","296":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef","297":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef as","298":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFun","299":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor","300":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {","301":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T","302":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T :","303":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type","304":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*}","305":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [","306":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category","307":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T","308":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T]","309":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (","310":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C","311":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C :","312":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : Hom","313":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : Homological","314":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComple","315":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex","316":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (","317":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T","318":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T ","319":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964","320":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V","321":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V)","322":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c","323":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c)","324":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :","325":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n","326":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n   ","327":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T","328":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T ","329":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964","330":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 Hom","331":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 Homological","332":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComple","333":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex","334":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V","335":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c","336":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where","337":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n","338":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n ","339":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj","340":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t","341":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=","342":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n","343":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n   ","344":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    {","345":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X","346":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X :=","347":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun","348":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i","349":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i =>","350":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (","351":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C","352":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.","353":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X","354":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i","355":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).","356":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj","357":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t","358":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n","359":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n     ","360":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d","361":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d :=","362":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun","363":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i","364":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j","365":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j =>","366":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (","367":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C","368":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.","369":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d","370":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i","371":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j","372":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).","373":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app","374":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t","375":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n","376":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n     ","377":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d","378":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_","379":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp","380":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_","381":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d","382":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d'","383":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' :=","384":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun","385":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i","386":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j","387":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k","388":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _","389":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _","390":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ =>","391":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by","392":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n","393":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n       ","394":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have","395":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have :=","396":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C","397":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.","398":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d","399":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_","400":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp","401":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_","402":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d","403":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i","404":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j","405":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k","406":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n","407":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n       ","408":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        r","409":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw","410":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [","411":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [N","412":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [Nat","413":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans","414":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.","415":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext","416":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_","417":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff","418":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff,","419":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function","420":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.","421":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.fun","422":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext","423":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_","424":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff","425":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff]","426":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at","427":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this","428":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n","429":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n       ","430":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact","431":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this","432":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t","433":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n","434":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n     ","435":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape","436":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape :=","437":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun","438":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i","439":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j","440":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h","441":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h =>","442":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by","443":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n","444":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n       ","445":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have","446":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have :=","447":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C","448":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.","449":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape","450":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _","451":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _","452":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h","453":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n","454":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n       ","455":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        r","456":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw","457":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [","458":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [N","459":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [Nat","460":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans","461":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.","462":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext","463":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_","464":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff","465":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff,","466":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function","467":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.","468":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.fun","469":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext","470":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_","471":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff","472":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff]","473":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at","474":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this","475":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n","476":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n       ","477":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact","478":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this","479":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t","480":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }","481":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n","482":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n ","483":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map","484":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h","485":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=","486":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n","487":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n   ","488":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    {","489":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f","490":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f :=","491":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun","492":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i","493":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i =>","494":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (","495":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C","496":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.","497":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X","498":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i","499":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).","500":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map","501":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h","502":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n","503":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n     ","504":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm","505":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm'","506":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' :=","507":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun","508":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i","509":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j","510":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _","511":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ =>","512":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => Nat","513":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans","514":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.","515":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.n","516":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.natur","517":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality","518":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _","519":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _","520":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }","521":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n","522":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n ","523":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map","524":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_","525":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id","526":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t","527":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t :=","528":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by","529":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n","530":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n   ","531":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext","532":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i","533":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n","534":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n   ","535":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    d","536":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp","537":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n","538":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n   ","539":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    r","540":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw","541":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(","542":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C","543":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.","544":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X","545":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i","546":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).","547":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map","548":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_","549":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id","550":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]","551":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n","552":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n ","553":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map","554":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_","555":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp","556":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h","557":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081","558":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h","559":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082","560":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 :=","561":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by","562":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n","563":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n   ","564":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext","565":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i","566":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n","567":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n   ","568":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    d","569":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp","570":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n","571":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n   ","572":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    r","573":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw","574":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [","575":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Fun","576":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor","577":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.","578":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map","579":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_","580":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp","581":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]","582":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n","583":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#","584":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align","585":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align hom","586":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological","587":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_","588":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex","589":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.","590":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as","591":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_","592":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_fun","593":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor","594":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor Hom","595":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor Homological","596":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComple","597":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex","598":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.","599":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.as","600":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFun","601":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor","602":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n","603":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n","604":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n--","605":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO","606":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in","607":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact","608":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact,","609":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this","610":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is","611":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an","612":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence","613":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of","614":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories","615":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.","616":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n","617":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/","618":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/--","619":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The","620":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The fun","621":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functor","622":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial","623":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version","624":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of","625":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `","626":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `Hom","627":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `Homological","628":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComple","629":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex","630":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.","631":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.as","632":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFun","633":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor","634":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`.","635":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -","636":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/","637":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n","638":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@","639":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[","640":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[sim","641":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps","642":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]","643":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\n","644":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef","645":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complex","646":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOf","647":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFun","648":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctors","649":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsTo","650":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFun","651":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctor","652":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorTo","653":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComple","654":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex","655":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {","656":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T","657":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T :","658":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type","659":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*}","660":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [","661":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category","662":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T","663":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T]","664":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :","665":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n","666":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n   ","667":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    Hom","668":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    Homological","669":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComple","670":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex","671":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (","672":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T","673":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T ","674":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964","675":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V","676":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V)","677":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c","678":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c ","679":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964","680":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T","681":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T ","682":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964","683":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 Hom","684":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 Homological","685":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComple","686":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex","687":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V","688":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c","689":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where","690":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n","691":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n ","692":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj","693":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C","694":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C :=","695":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C","696":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.","697":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.as","698":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFun","699":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor","700":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n","701":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n ","702":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map","703":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f","704":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=","705":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n","706":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n   ","707":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    {","708":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app","709":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app :=","710":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun","711":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t","712":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>","713":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n","714":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n       ","715":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        {","716":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f","717":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f :=","718":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun","719":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i","720":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i =>","721":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (","722":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f","723":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.","724":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f","725":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i","726":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).","727":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app","728":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t","729":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n","730":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n         ","731":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm","732":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm'","733":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' :=","734":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun","735":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i","736":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j","737":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _","738":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ =>","739":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => Nat","740":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans","741":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.","742":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.con","743":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr","744":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_","745":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app","746":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (","747":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f","748":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.","749":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm","750":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i","751":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j","752":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j)","753":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t","754":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }","755":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n","756":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n     ","757":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      natur","758":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality","759":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality :=","760":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun","761":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t","762":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t","763":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t'","764":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g","765":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g =>","766":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by","767":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n","768":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n       ","769":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext","770":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i","771":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n","772":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n       ","773":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact","774":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (","775":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f","776":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.","777":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f","778":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i","779":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).","780":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).n","781":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).natur","782":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality","783":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g","784":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }","785":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n","786":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#","787":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align","788":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align hom","789":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological","790":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_","791":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex","792":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.","793":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex","794":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_","795":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of","796":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_","797":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_fun","798":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors","799":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_","800":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to","801":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_","802":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_fun","803":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor","804":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_","805":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to","806":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_","807":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex","808":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex Hom","809":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex Homological","810":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComple","811":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex","812":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.","813":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complex","814":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOf","815":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFun","816":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctors","817":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsTo","818":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFun","819":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctor","820":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorTo","821":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComple","822":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex","823":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n","824":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n\n","825":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n\nend","826":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n\nend Hom","827":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n\nend Homological","828":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n\nend HomologicalComple","829":"\/-\nCopyright (c) 2021 Johan Commelin. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\nAuthors: Johan Commelin\n-\/\nimport Mathlib.Algebra.Homology.HomologicalComplex\n\n#align_import algebra.homology.functor from \"leanprover-community\/mathlib\"@\"8e25bb6c1645bb80670e13848b79a54aa45cb84f\"\n\n\/-!\n# Complexes in functor categories\n\nWe can view a complex valued in a functor category `T \u2964 V` as\na functor from `T` to complexes valued in `V`.\n\n## Future work\nIn fact this is an equivalence of categories.\n\n-\/\n\n\nuniverse v u\n\nopen CategoryTheory\n\nopen CategoryTheory.Limits\n\nnamespace HomologicalComplex\n\nvariable {V : Type u} [Category.{v} V] [HasZeroMorphisms V]\n\nvariable {\u03b9 : Type*} {c : ComplexShape \u03b9}\n\n\/-- A complex of functors gives a functor to complexes. -\/\n@[simps obj map]\ndef asFunctor {T : Type*} [Category T] (C : HomologicalComplex (T \u2964 V) c) :\n    T \u2964 HomologicalComplex V c where\n  obj t :=\n    { X := fun i => (C.X i).obj t\n      d := fun i j => (C.d i j).app t\n      d_comp_d' := fun i j k _ _ => by\n        have := C.d_comp_d i j k\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t\n      shape := fun i j h => by\n        have := C.shape _ _ h\n        rw [NatTrans.ext_iff, Function.funext_iff] at this\n        exact this t }\n  map h :=\n    { f := fun i => (C.X i).map h\n      comm' := fun i j _ => NatTrans.naturality _ _ }\n  map_id t := by\n    ext i\n    dsimp\n    rw [(C.X i).map_id]\n  map_comp h\u2081 h\u2082 := by\n    ext i\n    dsimp\n    rw [Functor.map_comp]\n#align homological_complex.as_functor HomologicalComplex.asFunctor\n\n-- TODO in fact, this is an equivalence of categories.\n\/-- The functorial version of `HomologicalComplex.asFunctor`. -\/\n@[simps]\ndef complexOfFunctorsToFunctorToComplex {T : Type*} [Category T] :\n    HomologicalComplex (T \u2964 V) c \u2964 T \u2964 HomologicalComplex V c where\n  obj C := C.asFunctor\n  map f :=\n    { app := fun t =>\n        { f := fun i => (f.f i).app t\n          comm' := fun i j _ => NatTrans.congr_app (f.comm i j) t }\n      naturality := fun t t' g => by\n        ext i\n        exact (f.f i).naturality g }\n#align homological_complex.complex_of_functors_to_functor_to_complex HomologicalComplex.complexOfFunctorsToFunctorToComplex\n\nend HomologicalComplex"},"target":{"0":"-","1":"<0x0A>","2":"Copy","3":"right","4":"\u2581(","5":"c","6":")","7":"\u2581","8":"2","9":"0","10":"2","11":"1","12":"\u2581Johan","13":"\u2581Comm","14":"elin","15":".","16":"\u2581All","17":"\u2581rights","18":"\u2581reserved","19":".","20":"<0x0A>","21":"Re","22":"leased","23":"\u2581under","24":"\u2581Apache","25":"\u2581","26":"2","27":".","28":"0","29":"\u2581license","30":"\u2581as","31":"\u2581described","32":"\u2581in","33":"\u2581the","34":"\u2581file","35":"\u2581L","36":"IC","37":"EN","38":"SE","39":".","40":"<0x0A>","41":"Auth","42":"ors","43":":","44":"\u2581Johan","45":"\u2581Comm","46":"elin","47":"<0x0A>","48":"-","49":"\/","50":"<0x0A>","51":"import","52":"\u2581Math","53":"lib","54":".","55":"Al","56":"gebra","57":".","58":"Hom","59":"ology","60":".","61":"Hom","62":"ological","63":"Comple","64":"x","65":"<0x0A>","66":"<0x0A>","67":"#","68":"align","69":"_","70":"import","71":"\u2581algebra","72":".","73":"hom","74":"ology","75":".","76":"fun","77":"ctor","78":"\u2581from","79":"\u2581\"","80":"lean","81":"pro","82":"ver","83":"-","84":"community","85":"\/","86":"math","87":"lib","88":"\"","89":"@\"","90":"8","91":"e","92":"2","93":"5","94":"bb","95":"6","96":"c","97":"1","98":"6","99":"4","100":"5","101":"bb","102":"8","103":"0","104":"6","105":"7","106":"0","107":"e","108":"1","109":"3","110":"8","111":"4","112":"8","113":"b","114":"7","115":"9","116":"a","117":"5","118":"4","119":"aa","120":"4","121":"5","122":"cb","123":"8","124":"4","125":"f","126":"\"","127":"<0x0A>","128":"<0x0A>","129":"\/-","130":"!","131":"<0x0A>","132":"#","133":"\u2581Comple","134":"xes","135":"\u2581in","136":"\u2581fun","137":"ctor","138":"\u2581categories","139":"<0x0A>","140":"<0x0A>","141":"We","142":"\u2581can","143":"\u2581view","144":"\u2581a","145":"\u2581complex","146":"\u2581val","147":"ued","148":"\u2581in","149":"\u2581a","150":"\u2581fun","151":"ctor","152":"\u2581category","153":"\u2581`","154":"T","155":"\u2581","156":"\u2964","157":"\u2581V","158":"`","159":"\u2581as","160":"<0x0A>","161":"a","162":"\u2581fun","163":"ctor","164":"\u2581from","165":"\u2581`","166":"T","167":"`","168":"\u2581to","169":"\u2581complex","170":"es","171":"\u2581val","172":"ued","173":"\u2581in","174":"\u2581`","175":"V","176":"`.","177":"<0x0A>","178":"<0x0A>","179":"##","180":"\u2581Future","181":"\u2581work","182":"<0x0A>","183":"In","184":"\u2581fact","185":"\u2581this","186":"\u2581is","187":"\u2581an","188":"\u2581equivalence","189":"\u2581of","190":"\u2581categories","191":".","192":"<0x0A>","193":"<0x0A>","194":"-","195":"\/","196":"<0x0A>","197":"<0x0A>","198":"<0x0A>","199":"un","200":"iverse","201":"\u2581v","202":"\u2581u","203":"<0x0A>","204":"<0x0A>","205":"open","206":"\u2581Category","207":"The","208":"ory","209":"<0x0A>","210":"<0x0A>","211":"open","212":"\u2581Category","213":"The","214":"ory","215":".","216":"L","217":"im","218":"its","219":"<0x0A>","220":"<0x0A>","221":"namespace","222":"\u2581Hom","223":"ological","224":"Comple","225":"x","226":"<0x0A>","227":"<0x0A>","228":"variable","229":"\u2581{","230":"V","231":"\u2581:","232":"\u2581Type","233":"\u2581u","234":"}","235":"\u2581[","236":"Category","237":".","238":"{","239":"v","240":"}","241":"\u2581V","242":"]","243":"\u2581[","244":"Has","245":"Zero","246":"M","247":"orph","248":"isms","249":"\u2581V","250":"]","251":"<0x0A>","252":"<0x0A>","253":"variable","254":"\u2581{","255":"\u03b9","256":"\u2581:","257":"\u2581Type","258":"*}","259":"\u2581{","260":"c","261":"\u2581:","262":"\u2581Complex","263":"Shape","264":"\u2581","265":"\u03b9","266":"}","267":"<0x0A>","268":"<0x0A>","269":"\/","270":"--","271":"\u2581A","272":"\u2581complex","273":"\u2581of","274":"\u2581fun","275":"ctors","276":"\u2581gives","277":"\u2581a","278":"\u2581fun","279":"ctor","280":"\u2581to","281":"\u2581complex","282":"es","283":".","284":"\u2581-","285":"\/","286":"<0x0A>","287":"@","288":"[","289":"sim","290":"ps","291":"\u2581obj","292":"\u2581map","293":"]","294":"<0x0A>","295":"def","296":"\u2581as","297":"Fun","298":"ctor","299":"\u2581{","300":"T","301":"\u2581:","302":"\u2581Type","303":"*}","304":"\u2581[","305":"Category","306":"\u2581T","307":"]","308":"\u2581(","309":"C","310":"\u2581:","311":"\u2581Hom","312":"ological","313":"Comple","314":"x","315":"\u2581(","316":"T","317":"\u2581","318":"\u2964","319":"\u2581V","320":")","321":"\u2581c","322":")","323":"\u2581:","324":"<0x0A>","325":"\u2581\u2581\u2581","326":"\u2581T","327":"\u2581","328":"\u2964","329":"\u2581Hom","330":"ological","331":"Comple","332":"x","333":"\u2581V","334":"\u2581c","335":"\u2581where","336":"<0x0A>","337":"\u2581","338":"\u2581obj","339":"\u2581t","340":"\u2581:=","341":"<0x0A>","342":"\u2581\u2581\u2581","343":"\u2581{","344":"\u2581X","345":"\u2581:=","346":"\u2581fun","347":"\u2581i","348":"\u2581=>","349":"\u2581(","350":"C","351":".","352":"X","353":"\u2581i","354":").","355":"obj","356":"\u2581t","357":"<0x0A>","358":"\u2581\u2581\u2581\u2581\u2581","359":"\u2581d","360":"\u2581:=","361":"\u2581fun","362":"\u2581i","363":"\u2581j","364":"\u2581=>","365":"\u2581(","366":"C","367":".","368":"d","369":"\u2581i","370":"\u2581j","371":").","372":"app","373":"\u2581t","374":"<0x0A>","375":"\u2581\u2581\u2581\u2581\u2581","376":"\u2581d","377":"_","378":"comp","379":"_","380":"d","381":"'","382":"\u2581:=","383":"\u2581fun","384":"\u2581i","385":"\u2581j","386":"\u2581k","387":"\u2581_","388":"\u2581_","389":"\u2581=>","390":"\u2581by","391":"<0x0A>","392":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","393":"\u2581have","394":"\u2581:=","395":"\u2581C","396":".","397":"d","398":"_","399":"comp","400":"_","401":"d","402":"\u2581i","403":"\u2581j","404":"\u2581k","405":"<0x0A>","406":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","407":"\u2581r","408":"w","409":"\u2581[","410":"N","411":"at","412":"Trans","413":".","414":"ext","415":"_","416":"iff","417":",","418":"\u2581Function","419":".","420":"fun","421":"ext","422":"_","423":"iff","424":"]","425":"\u2581at","426":"\u2581this","427":"<0x0A>","428":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","429":"\u2581exact","430":"\u2581this","431":"\u2581t","432":"<0x0A>","433":"\u2581\u2581\u2581\u2581\u2581","434":"\u2581shape","435":"\u2581:=","436":"\u2581fun","437":"\u2581i","438":"\u2581j","439":"\u2581h","440":"\u2581=>","441":"\u2581by","442":"<0x0A>","443":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","444":"\u2581have","445":"\u2581:=","446":"\u2581C","447":".","448":"shape","449":"\u2581_","450":"\u2581_","451":"\u2581h","452":"<0x0A>","453":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","454":"\u2581r","455":"w","456":"\u2581[","457":"N","458":"at","459":"Trans","460":".","461":"ext","462":"_","463":"iff","464":",","465":"\u2581Function","466":".","467":"fun","468":"ext","469":"_","470":"iff","471":"]","472":"\u2581at","473":"\u2581this","474":"<0x0A>","475":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","476":"\u2581exact","477":"\u2581this","478":"\u2581t","479":"\u2581}","480":"<0x0A>","481":"\u2581","482":"\u2581map","483":"\u2581h","484":"\u2581:=","485":"<0x0A>","486":"\u2581\u2581\u2581","487":"\u2581{","488":"\u2581f","489":"\u2581:=","490":"\u2581fun","491":"\u2581i","492":"\u2581=>","493":"\u2581(","494":"C","495":".","496":"X","497":"\u2581i","498":").","499":"map","500":"\u2581h","501":"<0x0A>","502":"\u2581\u2581\u2581\u2581\u2581","503":"\u2581comm","504":"'","505":"\u2581:=","506":"\u2581fun","507":"\u2581i","508":"\u2581j","509":"\u2581_","510":"\u2581=>","511":"\u2581Nat","512":"Trans","513":".","514":"n","515":"atur","516":"ality","517":"\u2581_","518":"\u2581_","519":"\u2581}","520":"<0x0A>","521":"\u2581","522":"\u2581map","523":"_","524":"id","525":"\u2581t","526":"\u2581:=","527":"\u2581by","528":"<0x0A>","529":"\u2581\u2581\u2581","530":"\u2581ext","531":"\u2581i","532":"<0x0A>","533":"\u2581\u2581\u2581","534":"\u2581d","535":"simp","536":"<0x0A>","537":"\u2581\u2581\u2581","538":"\u2581r","539":"w","540":"\u2581[(","541":"C","542":".","543":"X","544":"\u2581i","545":").","546":"map","547":"_","548":"id","549":"]","550":"<0x0A>","551":"\u2581","552":"\u2581map","553":"_","554":"comp","555":"\u2581h","556":"\u2081","557":"\u2581h","558":"\u2082","559":"\u2581:=","560":"\u2581by","561":"<0x0A>","562":"\u2581\u2581\u2581","563":"\u2581ext","564":"\u2581i","565":"<0x0A>","566":"\u2581\u2581\u2581","567":"\u2581d","568":"simp","569":"<0x0A>","570":"\u2581\u2581\u2581","571":"\u2581r","572":"w","573":"\u2581[","574":"Fun","575":"ctor","576":".","577":"map","578":"_","579":"comp","580":"]","581":"<0x0A>","582":"#","583":"align","584":"\u2581hom","585":"ological","586":"_","587":"complex","588":".","589":"as","590":"_","591":"fun","592":"ctor","593":"\u2581Hom","594":"ological","595":"Comple","596":"x","597":".","598":"as","599":"Fun","600":"ctor","601":"<0x0A>","602":"<0x0A>","603":"--","604":"\u2581TODO","605":"\u2581in","606":"\u2581fact","607":",","608":"\u2581this","609":"\u2581is","610":"\u2581an","611":"\u2581equivalence","612":"\u2581of","613":"\u2581categories","614":".","615":"<0x0A>","616":"\/","617":"--","618":"\u2581The","619":"\u2581fun","620":"ctor","621":"ial","622":"\u2581version","623":"\u2581of","624":"\u2581`","625":"Hom","626":"ological","627":"Comple","628":"x","629":".","630":"as","631":"Fun","632":"ctor","633":"`.","634":"\u2581-","635":"\/","636":"<0x0A>","637":"@","638":"[","639":"sim","640":"ps","641":"]","642":"<0x0A>","643":"def","644":"\u2581complex","645":"Of","646":"Fun","647":"ctors","648":"To","649":"Fun","650":"ctor","651":"To","652":"Comple","653":"x","654":"\u2581{","655":"T","656":"\u2581:","657":"\u2581Type","658":"*}","659":"\u2581[","660":"Category","661":"\u2581T","662":"]","663":"\u2581:","664":"<0x0A>","665":"\u2581\u2581\u2581","666":"\u2581Hom","667":"ological","668":"Comple","669":"x","670":"\u2581(","671":"T","672":"\u2581","673":"\u2964","674":"\u2581V","675":")","676":"\u2581c","677":"\u2581","678":"\u2964","679":"\u2581T","680":"\u2581","681":"\u2964","682":"\u2581Hom","683":"ological","684":"Comple","685":"x","686":"\u2581V","687":"\u2581c","688":"\u2581where","689":"<0x0A>","690":"\u2581","691":"\u2581obj","692":"\u2581C","693":"\u2581:=","694":"\u2581C","695":".","696":"as","697":"Fun","698":"ctor","699":"<0x0A>","700":"\u2581","701":"\u2581map","702":"\u2581f","703":"\u2581:=","704":"<0x0A>","705":"\u2581\u2581\u2581","706":"\u2581{","707":"\u2581app","708":"\u2581:=","709":"\u2581fun","710":"\u2581t","711":"\u2581=>","712":"<0x0A>","713":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","714":"\u2581{","715":"\u2581f","716":"\u2581:=","717":"\u2581fun","718":"\u2581i","719":"\u2581=>","720":"\u2581(","721":"f","722":".","723":"f","724":"\u2581i","725":").","726":"app","727":"\u2581t","728":"<0x0A>","729":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581","730":"\u2581comm","731":"'","732":"\u2581:=","733":"\u2581fun","734":"\u2581i","735":"\u2581j","736":"\u2581_","737":"\u2581=>","738":"\u2581Nat","739":"Trans","740":".","741":"con","742":"gr","743":"_","744":"app","745":"\u2581(","746":"f","747":".","748":"comm","749":"\u2581i","750":"\u2581j","751":")","752":"\u2581t","753":"\u2581}","754":"<0x0A>","755":"\u2581\u2581\u2581\u2581\u2581","756":"\u2581natur","757":"ality","758":"\u2581:=","759":"\u2581fun","760":"\u2581t","761":"\u2581t","762":"'","763":"\u2581g","764":"\u2581=>","765":"\u2581by","766":"<0x0A>","767":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","768":"\u2581ext","769":"\u2581i","770":"<0x0A>","771":"\u2581\u2581\u2581\u2581\u2581\u2581\u2581","772":"\u2581exact","773":"\u2581(","774":"f","775":".","776":"f","777":"\u2581i","778":").","779":"n","780":"atur","781":"ality","782":"\u2581g","783":"\u2581}","784":"<0x0A>","785":"#","786":"align","787":"\u2581hom","788":"ological","789":"_","790":"complex","791":".","792":"complex","793":"_","794":"of","795":"_","796":"fun","797":"ctors","798":"_","799":"to","800":"_","801":"fun","802":"ctor","803":"_","804":"to","805":"_","806":"complex","807":"\u2581Hom","808":"ological","809":"Comple","810":"x","811":".","812":"complex","813":"Of","814":"Fun","815":"ctors","816":"To","817":"Fun","818":"ctor","819":"To","820":"Comple","821":"x","822":"<0x0A>","823":"<0x0A>","824":"end","825":"\u2581Hom","826":"ological","827":"Comple","828":"x","829":"<0x0A>"}}